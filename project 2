module fsm(
    input wire clk,
    input wire reset,
    input wire in,
    output reg [1:0] state
);

// State encoding
parameter S0 = 2'b00,
          S1 = 2'b01,
          S2 = 2'b10,
          S3 = 2'b11;

// State register
reg [1:0] current_state, next_state;

// State transition logic
always @(posedge clk or posedge reset) begin
    if (reset)
        current_state <= S0;
    else
        current_state <= next_state;
end

// Next state logic
always @(*) begin
    case (current_state)
        S0: next_state = (in) ? S1 : S0;
        S1: next_state = (in) ? S2 : S0;
        S2: next_state = (in) ? S3 : S0;
        S3: next_state = (in) ? S0 : S0;
        default: next_state = S0;
    endcase
end

// Output logic (optional)
always @(posedge clk) begin
    state <= current_state;
end

endmodule




module tb_fsm;
    reg clk;
    reg reset;
    reg in;
    wire [1:0] state;

    fsm uut (
        .clk(clk),
        .reset(reset),
        .in(in),
        .state(state)
    );

    initial begin
        // Initialize signals
        clk = 0;
        reset = 1;
        in = 0;

        // Apply reset
        #10 reset = 0;
        
        // Test sequence
        #10 in = 1;  // Move to S1
        #10 in = 1;  // Move to S2
        #10 in = 1;  // Move to S3
        #10 in = 1;  // Move to S0
        #10 in = 0;  // Stay at S0
        #10 in = 1;  // Move to S1

        // Finish simulation
        #10 $finish;
    end

    // Clock generation
    always #5 clk = ~clk;
endmodule
